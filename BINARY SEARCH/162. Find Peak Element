162. Find Peak Element
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int s = 0, e = nums.size() - 1;
        
        while (s < e) {
            int mid = s + (e - s) / 2;
            
            // If mid element is smaller than the next one, peak is on the right
            if (nums[mid] < nums[mid + 1]) {
                s = mid + 1;
            } 
            // Otherwise, peak is on the left (including mid)
            else {
                e = mid;
            }
        }
        
        return s; // or e, both will be same
    }
};

OR 
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int s = 0, e = nums.size() - 1;
        
        while (s <= e) {
            int mid = s + (e - s) / 2;

            // Check boundaries before accessing
            if ((mid == 0 || nums[mid] > nums[mid - 1]) &&
                (mid == nums.size() - 1 || nums[mid] > nums[mid + 1])) {
                return mid; // Found a peak
            }

            // Move right
            if (mid < nums.size() - 1 && nums[mid] < nums[mid + 1]) {
                s = mid + 1;
            } 
            // Move left
            else {
                e = mid - 1;
            }
        }
        return -1; // Should never happen if array is non-empty
    }
};
