239. Sliding Window Maximum
class Solution {
public:
//tc of this code is O(N)
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        //process first window
        for(int i=0;i<k;i++)
        {
            int ele=nums[i]; //ye ele toh Q ke insert hoga hee hoga
            //but hum ek kaam kr skte hai
            //abhi tk jitni bhi Q bni hui hai check konse faaltu hai 
            //then pop krado
            //faaltu  yaha pr chote ele's ,curr se chote
            int dqIndex=dq.front();
            while(!dq.empty() && nums[dq.back()]<ele)
            {
                dq.pop_back();
            }
            //curr ele push
            dq.push_back(i);
        }
        ///get ans for first window
        int index=dq.front();
        int ele=nums[index];
        ans.push_back(ele);
        //process remaining windows
        for(int i=k;i<nums.size();i++)
        {
            //removal
            if(!dq.empty() && dq.front()<i-k+1)
            {
                dq.pop_front();
            }
            //addition
            int ele=nums[i]; 
            int dqIndex=dq.front();
            while(!dq.empty() && nums[dq.back()]<ele)
            {
                dq.pop_back();
            }
            //curr ele push
            dq.push_back(i);  
             //ans store
              int index=dq.front();
        int ele2=nums[index];
        ans.push_back(ele2);
        }
        return ans;
    }
};
