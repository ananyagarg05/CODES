538. Convert BST to Greater Tree
//time complexity O(n)
class Solution {
public:
void storeInorder(TreeNode* root,vector<int>& inorder)
{
    if(root==NULL)
    {
        return;
    }
    //LNR
    storeInorder(root->left,inorder);
    inorder.push_back(root->val);
    storeInorder(root->right,inorder);
}
void updateTree(TreeNode* root, vector<int> inorder,int& index)
{   if(root==NULL)
    {
        return;
    }
    //lnr
    updateTree(root->left,inorder,index);
    root->val=inorder[index];
    index++; //by reference send kro
    updateTree(root->right,inorder,index);

}
    TreeNode* convertBST(TreeNode* root) {
          if(root==NULL)
        {
            return NULL;
        }
        if(root->left==NULL && root->right==NULL)
        {
            return root;
        }
        //step 1. Store inorder
        vector<int> inorder;
        storeInorder(root,inorder);
        //step 2. update inorder as per Ques
        int n=inorder.size();
        for(int i=n-1;i>=0;i--)
        {  int currval=inorder[i];
        int nextval=0;
            if(i+1<n)
            {
                nextval=inorder[i+1];
            }
            int sum=currval+nextval;
            //replacement
            inorder[i]=sum;
        }
        //step3. update treee using inorder
         int index=0;
        updateTree(root,inorder,index);
            return root;
    }
};
