109. Convert Sorted List to Binary Search Tree
class Solution {
public:
// Time Complexity: O(n)
int getLength(ListNode*& head)
{
    int length = 0;
     ListNode* temp = head;
        while (temp) {
            length++;
            temp = temp->next;
        }
        return length;
}
TreeNode* solve(ListNode*& head, int n)
{
        if(head==NULL || n<=0)
        {
            return NULL;
        }
         //inorder use
        //l
        TreeNode* LST=solve(head,n/2); //left ka sub tree ready
        //N
           TreeNode* root=new TreeNode(head->val);
           //ab head mid node pr khada hoga
           root->left=LST;
           //ab head mid pr khada tha
           //usko aage bhejo
           head=head->next;
           //ab head right part of LL ke start node pr khada hoga
         TreeNode* RST=solve(head,n-n/2-1);
         root->right=RST;
         return root;
}
    TreeNode* sortedListToBST(ListNode* head) {
        int n=getLength(head);
      TreeNode* root= solve(head,n);  
      return root;
    }
};
