450. Delete Node in a BST
class Solution {
public:
//Time Complexity O(Log(N))
int getMax(TreeNode* root)
{    if(root==NULL)
{
    return -1;
}
while(root->right!=NULL)
{
    root=root->right;
}
//iska mltb ,jab main yaha pohchungi
//tab root extreme left pr hoga
   return root->val;
}
    TreeNode* deleteNode(TreeNode* root, int key) { 
     if(root==NULL)
     { 
      return NULL;
     }
     if(root->val==key)
     { //match
     //ab delete the node
     //4 cases
     //with 0 child
     if(root->left==NULL && root->right==NULL)
     {
        //no need to do 
        delete root;
        //now we have to put something to root place
        return NULL;
     }
     //with only L child
     if(root->left!=NULL && root->right==NULL)
     {   TreeNode* leftchild=root->left; //save kralo
     root->left=NULL; //isolate
     delete root;
     return leftchild;
     }
     //with R child only
     if(root->left==NULL && root->right!=NULL)
     {
         TreeNode* rightchild=root->right; //save kralo
     root->right=NULL; //isolate
     delete root;
     return rightchild;
     }
     //with both ,l and r childs
    if(root->left!=NULL && root->right!=NULL)
    { //to find just chota element
        int maxval=getMax(root->left);
        //replace root node's value with maxval
        root->val=maxval;
        //delete actual node of maxval
        root->left=deleteNode(root->left,maxval);
        return root;
    } 
     }
     else
     {
        //not match
        //elft ya right jao
        if(key<root->val)
        {
            //left jao
            root->left=deleteNode(root->left,key);
        }
        else
        {  //right jao
              root->right=deleteNode(root->right,key);
        }
     }
     return root;
    }
};
