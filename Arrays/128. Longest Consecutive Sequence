128. Longest Consecutive Sequence

class Solution {
public:
//Time Complexity O(N)

    int longestConsecutive(vector<int>& nums) {
         // Edge case: If the array is empty, return 0
        if (nums.empty()) {
            return 0;
        }

        // Store all elements in a hash set
        std::unordered_set<int> numSet(nums.begin(), nums.end());
        int longestStreak = 0;

        // Iterate through the numbers
        for (int num : nums) {
            // Check if the current number is the start of a sequence
            if (numSet.find(num - 1) == numSet.end()) {
                int currentNum = num;
                int currentStreak = 1;

                // Count the length of the sequence
                while (numSet.find(currentNum + 1) != numSet.end()) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                // Update the longest streak found
                longestStreak = std::max(longestStreak, currentStreak);
            }
        }
                 return longestStreak;
    }
};
