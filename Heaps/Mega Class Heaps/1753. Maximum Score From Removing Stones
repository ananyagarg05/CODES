1753. Maximum Score From Removing Stones

/*Time Complexity:
Each heap operation (push and pop) takes 
O(log3)=O(1), since the heap size is at most 3.
The number of operations is proportional to the total number of stones, which is 
O(a+b+c).
So the overall time complexity is 
O(a+b+c), as each stone is processed once.

Space Complexity:
The space complexity is O(1), since the heap size is constant (at most 3 elements).*/

class Solution {
public:
    int maximumScore(int a, int b, int c) {
    //maxHeap
    //We use a max-heap (priority queue) to always pick the two largest piles.
    // The top of the heap will always be the largest element.
    priority_queue<int,vector<int>> maxHeap;
     maxHeap.push(a);
    maxHeap.push(b);
    maxHeap.push(c);
    int score=0;
    while(maxHeap.size()>1)
    {
        int pile1=maxHeap.top();
        maxHeap.pop();
        int pile2=maxHeap.top();
        maxHeap.pop();
        pile1--; pile2--;
        score++;
        if(pile1>0) maxHeap.push(pile1);
         if(pile2>0) maxHeap.push(pile2);
    }
    return score;
    }
};
