355. Design Twitter

Min-Heap is preferred in this case because:
You only need to store the 10 most recent tweets, so the heap’s size is always limited to 10. This makes the min-heap space-efficient, since it doesn’t need to store all tweets.

Heap operations like insertion and extraction will only operate on 10 elements, making them extremely fast (O(log10)=O(1)).

Max-Heap, while also correct, would require storing all tweets, and you would need to pop the top 10 elements, which could be less efficient, especially if there are a large number of tweets from users and followees. Each heap operation in the max-heap is 
O(logn), where 𝑛 , n is the total number of tweets, which can be much larger than 10.

In this problem, an unordered set is typically used to keep track of the users that someone follows. This is important because the system needs to:

Allow a user to follow multiple people.
Allow a user to unfollow specific people.
Quickly check if one user is following another.

Since the problem only cares about whether a user follows another (and not how many times they follow someone), an unordered set is an ideal data structure. It provides average O(1) time complexity for insertions, deletions, and lookups.

Use unordered_set when you only care about unique elements (e.g., tracking the people a user follows without duplicates.

Maps vs sets

unordered_set: Used to track the unique set of people a user follows.
unordered_map: Used to map keys to values, like users to tweets.

class Twitter {
    struct Tweet
    {   int tweetId;
        int time;
     Tweet(int id , int t) : tweetId(id),time(t) {};
    };
     //global clock
       int time;
    //maps
    //1. map-> userId to TWEETS, userId to the tweets that the user has posted
    unordered_map<int,vector<Tweet>> tweets;
    //2.map -> follow unfllow
    //map-> uderID to vector userid, userid to his followings
      unordered_map<int, unordered_set<int>> following;

      class comp
      {
         public:
      bool operator()(const Tweet&a,const Tweet&b)
       {
              return a.time>b.time;
       }
      };
public:
    Twitter() {
        time=0;
    }
    
    void postTweet(int userId, int tweetId) {
        tweets[userId].push_back(Tweet(tweetId,time++));
    }
    //returning the TweetsIds of 10 most recent tweets done by me or my followers
    vector<int> getNewsFeed(int userId) {
         // Min-heap to store the most recent 10 tweets. 
       priority_queue<Tweet,vector<Tweet>,comp> minHeap;
     //add user's tweets
     if(tweets.find(userId)!=tweets.end())
     {
        for(auto tweet:tweets[userId])
      {
             minHeap.push(tweet);
             if(minHeap.size()>10)
             minHeap.pop(); //remove the oldest tweet
      }
     } 
  
     //addd tweets from my followings
     if(following.find(userId)!=following.end())
     {
        auto myFollowings =following[userId];
        for(auto followeeId:myFollowings)
        {
             if(tweets.find(followeeId)!=tweets.end())
     {
        for(auto tweet:tweets[followeeId])
      {
             minHeap.push(tweet);
             if(minHeap.size()>10)
             minHeap.pop(); //remove the oldest tweet
         }
       } 
    }
 }
     //now return 
     //now i will have top 10 most recent
     //reverse krna padega min heap use ho rha hai isliye
     vector<int> newsFeedTweets;
     while(!minHeap.empty())
     {
        auto[tweetId,time]=minHeap.top();
              minHeap.pop();
        newsFeedTweets.push_back(tweetId);
     }
      reverse(newsFeedTweets.begin(),newsFeedTweets.end());
         return newsFeedTweets;
    }
    
    void follow(int followerId, int followeeId) {
        if(followerId==followeeId)
        return ; // i cant follow myself
      following[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        if(following.find(followerId)!= following.end())
        following[followerId].erase(followeeId);
    }
};
