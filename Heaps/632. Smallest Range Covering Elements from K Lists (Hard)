632. Smallest Range Covering Elements from K Lists
//Hard
//asked in Amazon 

class Info
{
    public:
    int data;
    int cIndex;
    int rIndex;
    Info(int a,int b,int c)
    {
        data=a;
        rIndex=b;
        cIndex=c;
    }
};

 class compare
 {
     public:
     bool operator()(Info* a , Info* b)
     {
         return a->data > b->data;
     }
 };


class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        priority_queue<Info*,vector<Info*>,compare> pq;
        vector<int> ans;
        int maxi=INT_MIN;
        int mini=INT_MAX;

        //process first k elemensts
        int totalRows= nums.size();
        for(int row=0;row<totalRows;row++)
        {
            int element=nums[row][0];
            Info* temp=new Info(element,row,0);
            pq.push(temp);
            //update maxi and mini
            maxi=max(maxi,element);
            mini=min(mini,element);
        }
        //ans start and ans end stores the smalleest diff wali values
        int ans_start=mini;
        int  ans_end=maxi;
        //main logic
          while(!pq.empty())
          {
            Info* front=pq.top();
            pq.pop();
             int frontData = front->data;
            int front_rindex=front->rIndex;
             int front_cindex=front->cIndex;

             //ye bhul jaate haii
             mini=frontData;
             //ans update
             if((maxi-mini)<(ans_end-ans_start))
             {  //update
                 ans_start=mini;
                ans_end=maxi;
             }
             //aage element h toh insert karo
             //columns ka size diffrent hai isliye total nikalo
             //kisi m 5 col, kisi m 4 
             int currentTotalColumns=nums[front_rindex].size();
             if(front_cindex+1 < currentTotalColumns)
             {
                int element=nums[front_rindex][front_cindex+1];
                Info* temp=new Info(element,front_rindex, front_cindex+1);
                maxi=max(maxi,element);
                pq.push(temp);
             }
             else
             {
                break;
             }  
          }
          ans.push_back(ans_start);
          ans.push_back(ans_end);
             return ans;
    }
};
