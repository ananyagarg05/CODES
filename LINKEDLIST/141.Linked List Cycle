141.Linked List Cycle
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_map<ListNode* ,bool> m;
        ListNode* temp =head;
      while(temp!=NULL)
      {
        if(m[temp]==true)
        {
            //pehle se hee true hai
            //cycle present hai

            return true;
        }
        else
        {//pehle se true nhi hai ,yani false
       // toh main visit krra hu ise
       //first time aaya hu
            m[temp]=true;
        }
        temp=temp->next;
      }
      //agr yaha tk pohoch gye ho ,iska mtlb loop se bahar aagya 
      //iska mtlb poora traverse hogyi
      //and end m null milgya
      //no cycle present
      return false;


 //another approach 
      //fast and slow 
      //space complexity better hai upr wale se 
      //sc o(1)
       ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL)
        {
            fast=fast->next;
            if(fast!=NULL)
            {
                fast=fast->next;
                slow=slow->next;
                if(fast==slow)
                {
                    return true;
                }
            }
        }
        return false;
    }
};
