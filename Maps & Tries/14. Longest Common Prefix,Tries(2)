14. Longest Common Prefix
Tries 2.

//Time Complexity O(n * m)  
//n is the number of words in the input.
//m is the average length of the words.
class TrieNode
{
public:
  char data;
  unordered_map<char,TrieNode*> children;
  bool isTerminal;
  TrieNode(char val)
  {
    data=val;
    isTerminal=false;
  }
};
 void insertWord(TrieNode* root,string word)
  { //base case
  if(word.length()==0)
  {
    root->isTerminal=true;
    return;
  }
   //ek case baaki R
   char ch=word[0];
   TrieNode* child;
   if(root->children.find(ch)!=root->children.end())
   {
    //present
    child=root->children[ch];
   }
   else
   {
    //absent
    child=new TrieNode(ch);
    root->children[ch]=child;
   }
   //baaki Rec
   insertWord(child,word.substr(1));
  }


void findlcp(TrieNode* root,string &ans)
{  
    //base case
    if(root->isTerminal==true)
    { 
        return;
    }

    TrieNode* child;

    //ek case hum krenge solve
    if(root->children.size()==1)
    {
        //ek hee bacha hai
        for(auto i:root->children)
        {
       char ch=i.first;
       ans.push_back(ch);
       child=i.second;
        }
    }
    else
    {
        //multiple or 0 baacha hai
        return;
    }
    //baaki Rec
    findlcp(child,ans);

}


class Solution {
public:
 string longestCommonPrefix(vector<string>& strs)
 {
    TrieNode* root=new TrieNode('-');
    //insert all words into Trie
    for(auto word:strs)
    {
        insertWord(root,word);
    }
    //main logic
    string ans="";
    findlcp(root,ans);
        return ans;
 }
};
