208. Implement Trie (Prefix Tree)

class TrieNode
{
public:
    char data;
    unordered_map<char, TrieNode*> children;
    bool isTerminal;

    TrieNode(char val)
    {
        data = val;
        isTerminal = false;
    }

    void insertWord(TrieNode* root, string word)
    {
        // Base case
        if (word.length() == 0)
        {
            root->isTerminal = true;
            return;
        }

        // Process current character
        char ch = word[0];
        TrieNode* child;

        // Check if character is already a child
        if (root->children.find(ch) != root->children.end())
        {
            // Present
            child = root->children[ch];
        }
        else
        {
            // Absent
            child = new TrieNode(ch);
            root->children[ch] = child;
        }

        // Recursion for remaining word
        insertWord(child, word.substr(1));
    }

    bool searchWord(TrieNode* root, string word)
    {
        // Base case
        if (word.length() == 0)
        {
            return root->isTerminal;
        }

        // Process current character
        char ch = word[0];
        TrieNode* child;

        // Check if character is present
        if (root->children.find(ch) != root->children.end())
        {
            child = root->children[ch];
        }
        else
        {
            return false;
        }

        // Recursion for remaining word
        return searchWord(child, word.substr(1));
    }

    bool searchPrefix(TrieNode* root, string word)
    {
        // Base case
        if (word.length() == 0)
        {
            return true;
        }

        // Process current character
        char ch = word[0];
        TrieNode* child;

        // Check if character is present
        if (root->children.find(ch) != root->children.end())
        {
            child = root->children[ch];
        }
        else
        {
            return false;
        }

        // Recursion for remaining word
        return searchPrefix(child, word.substr(1));
    }
};

class Trie {
    TrieNode* root;

public:
    Trie() {
        root = new TrieNode('-'); // Root node with a placeholder value
    }

    void insert(string word) {
        root->insertWord(root, word);
    }

    bool search(string word) {
        return root->searchWord(root, word);
    }

    bool startsWith(string prefix) {
        return root->searchPrefix(root, prefix);
    }
};
